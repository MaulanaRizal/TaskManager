@{
    ViewData["Title"] = "Task Manager";
    int numberRow = 0;
}

@section Styles{
    <style>
        .card{
            background-color:white;
        }

        .badge-completed{
            background-color:#ffc107;
        }

        .badge-pending{
            background-color:#6c757d;
        }

        .badge-inprogress{
            background-color:#007bff;
        }

        .modal-dialog{
            margin: 200px auto;
        }
    </style>
}

<div class="container">
    <div class="card">
        <div class="card-body">
            <h3>Task Manager</h3>
            <p>Task data collection table here each row represents an individual task, and columns display various attributes or properties of the tasks.</p>
            <hr />
                    
            @if(Model.Status == "Failed")
            {
                <div class="alert alert-danger" role="alert">
                  Oh no!, @(Model.Message)
                </div>
            }
            
            @if(TempData["Success"] != null)
            {
                <div class="alert alert-success" role="alert">
                  @TempData["Success"]
                </div>
            }
                        
            @if(TempData["Failed"] != null)
            {
                <div class="alert alert-danger" role="alert">
                  @TempData["Failed"]
                </div>
            }

            @if (Model.Status == "Success")
            {
                            
                <div class="col-md-4 float-end mb-3">
                    <div class="input-group ">
                      <input type="text" id="searchBox" class="form-control" placeholder="Search Task..." >
                      <button class="btn btn-outline-secondary" type="button" id="searchButton" value="">Search</button>
                      <button class="btn btn-outline-secondary" type="button" data-bs-toggle="modal" data-bs-target="#addTask">Add</button>
                    </div>
                </div>

                <table class="table">
                  <thead>
                    <tr>
                      <th scope="col">#</th>
                      <th scope="col">Title</th>
                      <th scope="col">Status</th>
                      <th scope="col">Description</th>
                    </tr>
                  </thead>
                  <tbody id="tableBody">
                    
                    @foreach(var Task in Model.Tasks)
                    {
                        <tr>
                          <th scope="row">@(++numberRow)</th>
                          <td width='200px'>
                              <span>@Task.title</span><br>
                              <span class="small"><a href=# id="taskEdit-@Task.id" onclick="updateTask(@Task.id)" data-bs-toggle="modal" data-bs-target="#editTask">Edit</a></span> |
                              <span class="small"><a href=# id="taskDelete-@Task.id" onclick="deleteTask(@Task.id,'@Task.title')" data-bs-toggle="modal" data-bs-target="#deleteTask">Delete</a></span>
                          </td>
                          <td>
                              @if(@Task.status.ToString() == "Completed"){
                                <span class="badge badge-completed">Completed</span>
                              }else if(@Task.status.ToString() == "InProgress"){
                                <span class="badge badge-inprogress">In Progress</span>
                              }else if(@Task.status.ToString() == "Pending"){
                                <span class="badge badge-pending">Pending</span>
                              }
                          </td>
                          <td >
                              <p style="max-height: 100px;overflow-y: auto;">@Task.description</p>
                          </td>
                        </tr>
                    }

                  </tbody>
                </table>
                
            }
                        
            <!-- Modal Input -->
                <div class="modal fade" id="addTask" tabindex="-1" aria-hidden="true">
                        @await Component.InvokeAsync("ModalInput") 
                </div>

            <!-- Modal Delete -->
                <div class="modal fade" id="deleteTask" tabindex="-1" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Delete Task</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <p id="bodyContext"></p>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                <a id="linkDelete" href="#" class="btn btn-danger">Delete</a>
                            </div>
                        </div>
                    </div>
                </div>
                                
            <!-- Modal Edit -->
                <div class="modal fade" id="editTask" tabindex="-1" aria-hidden="true">
                    @await Component.InvokeAsync("ModalUpdate")
                </div>

        </div>
    </div>

</div>

@section Scripts{
    <script>
        $('.alert').delay(5000).fadeOut();

        function updateTask(id){
            $.ajax({
                url : `/home/update/${id}`,
                method : 'GET',
                success : function(data){

                    if(data.status == "success"){
                        const task = data.task;
                        $('#updateForm').attr('action',`/Home/Update/${task.id}`);
                        $('#titleUpdate').val(task.title);
                        $('#statusUpdate').val(task.status);
                        $('#descriptionUpdate').val(task.description);
                    }

                    if(data.status == "failed"){
                        const alert = `<div class="alert alert-danger" role="alert" id=updateAlertDanger>${data.message}</div>`
                    
                        $('#updateAlertDanger').html(alert)
                        $('.alert').delay(5000).fadeOut();
                    }

                }
            })
        }

        function deleteTask(id,title){
            $('#bodyContext').text(`Are you sure delete task ${title}?`)
            $('#linkDelete').attr("href",`/home/delete/${id}`)
        }
            
        $('#searchBox').keypress(function(event){
            if(event.which === 13){
                searchTask();
            }
        })

        $('#searchButton').on('click', function(){
            searchTask();
        })



        function searchTask(){
            const query = $('#searchBox').val();

            $.ajax({
                url : '/home/search',
                method : 'GET',
                contentType: "application/json",
                data : {
                    query : query,
                },
                success : function(result){
                    let num = 0;
                    let rows = "";
                    result.forEach(function(item){

                        const titleContent = `<span>${item.title}</span><br>
                                <span class="small"><a href="#" id="taskEdit-${item.id}" onclick="updateTask(${item.id})" data-bs-toggle="modal" data-bs-target="#editTask">Edit</a></span> |
                                <span class="small"><a href="#" id="taskDelete-${item.id}" onclick="deleteTask(${item.id},'${item.title}')" data-bs-toggle="modal" data-bs-target="#deleteTask">Delete</a></span>
                                `;

                        let statusContent = "";
                        if(item.status == "Pending"){
                            statusContent = `<span class="badge badge-pending">Pending</span>`
                        }else if(item.status == "InProgress"){
                            statusContent = `<span class="badge badge-inprogress">In Progress</span>`
                        }else if(item.status == "Completed"){
                            statusContent = `<span class="badge badge-completed">Completed</span>`
                        }

                        const descriptionContent = `<p style="max-height: 100px;overflow-y: auto;">${item.description}</p>`

                        const row = `
                        <tr>
                            <th scope="row">${++num}</th>
                            <td width="200px">
                                ${titleContent}
                            </td>
                            <td>
                                ${statusContent}
                            </td>
                            <td>
                                ${descriptionContent}
                            </td>
                        </tr>`;

                        rows = rows + row;
                    })
                    $('#tableBody').html(rows);
                }
            })

        }


    </script>
}